# Logstash Pipeline Configuration for O-SIEM
input {
  # HTTP input for Fluent Bit and manual testing
  http {
    port => "8080"
    codec => json
  }
}

filter {
  # Add timestamp if not present
  if ![@timestamp] {
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }
  }

  # Process Linux audit logs (e.g., sh_arp_cache_*.log)
  if [filepath] =~ /sh_arp_cache/ or [log] =~ /^type=/ {
    grok {
      match => { "log" => "type=%{WORD:audit_type} msg=audit\\(%{NUMBER:audit_epoch}\\.%{NUMBER}:?%{NUMBER:audit_seq}\\): %{GREEDYDATA:audit_details}" }
      tag_on_failure => ["_grokparsefailure_audit"]
    }
    kv {
      source => "audit_details"
      target => "audit_fields"
      field_split => " "
      value_split => "="
    }
    mutate {
      add_field => { "log_type" => "linux_audit" }
    }
  }

  # Process syslog messages
  if [fields][log_type] == "syslog" or [input][type] == "syslog" {
    grok {
      match => {
        "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}"
      }
      tag_on_failure => ["_grokparsefailure_syslog"]
    }
    
    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
      target => "@timestamp"
    }
    
    mutate {
      add_field => { "log_type" => "syslog" }
    }
  }

  # Process JSON logs
  if [fields][log_type] == "json" or [input][type] == "json" {
    json {
      source => "message"
      target => "json_data"
    }
    
    mutate {
      add_field => { "log_type" => "json" }
    }
  }

  # Process security events
  if [fields][log_type] == "security" or [input][type] == "security" {
    mutate {
      add_field => { "log_type" => "security" }
    }
    
    # Extract IP addresses for threat hunting
    grok {
      match => { "message" => "%{IP:source_ip}" }
      tag_on_failure => ["_no_ip_found"]
    }
    
    grok {
      match => { "message" => ".*%{IP:dest_ip}.*" }
      tag_on_failure => ["_no_dest_ip_found"]
    }
  }

  # Process Linux system logs
  if [fields][log_type] == "linux" or [input][type] == "linux" {
    mutate {
      add_field => { "log_type" => "linux" }
    }
    
    # Extract user login events
    if [message] =~ /session opened for user/ {
      grok {
        match => { "message" => ".*session opened for user %{WORD:username}.*" }
        add_field => { "event_type" => "user_login" }
      }
    }
    
    # Extract failed login attempts
    if [message] =~ /Failed password/ {
      grok {
        match => { "message" => ".*Failed password for %{WORD:username} from %{IP:source_ip}.*" }
        add_field => { "event_type" => "failed_login" }
      }
    }
  }

  # Add common fields
  mutate {
    add_field => { 
      "environment" => "development"
      "project" => "o-siem"
    }
  }

  # Add geoip information for IP addresses
  if [source_ip] {
    geoip {
      source => "source_ip"
      target => "geoip"
    }
  }
}

output {
  elasticsearch {
    hosts => ["opensearch:9200"]
    index => "o-siem-%{+YYYY.MM.dd}"
    action => "create"
    document_id => "%{[@metadata][fingerprint]}"
    ilm_enabled => false
  }
  stdout {
    codec => rubydebug
  }
} 